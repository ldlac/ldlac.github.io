{"version":3,"sources":["components/MainInfo/MainInfo.js","components/Cmd/Cmd.js","gamedata/GameData.js","controller/GameController.js","gamedata/GameLines.js","controller/Crypto.js","controller/HistoryController.js","App.js","serviceWorker.js","index.js"],"names":["MainInfo","react_default","a","createElement","className","Component","Cmd","state","round","_this","props","GameController","arrowUp","onKeyPress","event","key","v","document","querySelector","validateInput","value","changeTextMain","addToCmdWindow","HistoryController","addHistory","r","getLastHistory","setState","undefined","onClickInput","m","node","replaceWith","hasChildNodes","children","remove","textArray","getText","forEach","element","textnode","createTextNode","appendChild","elm","length","lastChild","prepend","this","onClick","onKeyDown","gameData","username","Object","classCallCheck","incrementRound","1","2","3","bug","gameLines","f","cipher","toLowerCase","val","toString","salt","textToChars","text","split","map","c","charCodeAt","byteHex","n","Number","substr","applySaltToChar","code","reduce","b","join","history","splice","pop","i","lenght","App","gameController","historyController","components_MainInfo_MainInfo","components_Cmd_Cmd","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mQAWeA,gMANX,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,+BAHEC,cCwFRC,oNAvFbC,MAAQ,CACNC,MAAOC,EAAKC,MAAMC,eAAeH,MACjCI,QAAS,KASXC,WAAa,SAACC,GACZ,GAAkB,UAAdA,EAAMC,IAAiB,CACzB,IAAIC,EAAIC,SAASC,cAAc,QAC/BT,EAAKC,MAAMC,eAAeQ,cAAcH,EAAEI,MAAOX,EAAKY,gBACtDZ,EAAKa,eAAeN,EAAEI,OACtBX,EAAKC,MAAMa,kBAAkBC,WAAWR,EAAEI,OAC1CJ,EAAEI,MAAQ,QACL,GAAkB,YAAdN,EAAMC,IAAmB,CAClC,IAAIb,EAAIO,EAAKF,MAAMK,QACfI,EAAIC,SAASC,cAAc,QAC3BO,EAAIhB,EAAKC,MAAMa,kBAAkBG,eAAexB,IACzC,IAAPuB,GACFhB,EAAKkB,SAAS,CAAEf,QAAS,IACzBa,EAAIhB,EAAKC,MAAMa,kBAAkBG,eAAe,SACjCE,IAANH,EACTA,EAAI,IAEJvB,GAAQ,EACRO,EAAKkB,SAAS,CAAEf,QAASV,KAE3Bc,EAAEI,MAAQK,MAIdI,aAAe,WACb,GAAwC,IAApCpB,EAAKC,MAAMC,eAAeH,MAAa,CACzCC,EAAKY,iBACL,IAAIS,EAAIb,SAASC,cAAc,sBAC3Ba,EAAOd,SAASd,cAAc,OAClC4B,EAAK3B,UAAY,aACjB0B,EAAEE,YAAYD,OAIlBV,eAAiB,WAGf,IAFA,IAAIS,EAAIb,SAASC,cAAc,wBAExBY,EAAEG,iBACPH,EAAEI,SAAS,GAAGC,SAGhB,IAAMC,EAAY3B,EAAKC,MAAMC,eAAe0B,UACxCN,EAAOd,SAASd,cAAc,QAClC4B,EAAK3B,UAAY,oBACjBgC,EAAUE,QAAQ,SAAAC,GAChB,IAAIC,EAAWvB,SAASwB,eAAeF,GACvCR,EAAKW,YAAYF,GACjBT,EAAKW,YAAYzB,SAASd,cAAc,SAE1C2B,EAAEY,YAAYX,MAGhBT,eAAiB,SAACqB,GAChB,IAAIb,EAAIb,SAASC,cAAc,eAE3BY,EAAEI,SAASU,QAAU,IACvBd,EAAEe,UAAUV,SAGd,IAAIJ,EAAOd,SAASd,cAAc,KAClC4B,EAAK3B,UAAY,qBACjB,IAAIoC,EAAWvB,SAASwB,eAAe,KAAOE,GAC9CZ,EAAKW,YAAYF,GACjBV,EAAEgB,QAAQf,uFApE8B,IAApCgB,KAAKrC,MAAMC,eAAeH,OAC5BuC,KAAK1B,kDAuEP,OACEpB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,SAAO6C,QAASD,KAAKlB,aAAcoB,UAAWF,KAAKlC,WAAYT,UAAU,QACzEH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,8BAlFLC,cCFd6C,EAAW,CACXC,SAAU,ICkCCxC,EA/Bd,SAAAA,IAAc,IAAAF,EAAAsC,KAAAK,OAAAC,EAAA,EAAAD,CAAAL,KAAApC,GAAAoC,KAKbV,QAAU,WAER,OADA5B,EAAK6C,iBCFkBX,EDGHlC,EAAKD,MCVb,WAAQ,MAAQ,CAC5B+C,EAAG,CAAC,kBAAmB,iCACvBC,EAAG,CAAC,qBAAsB,2CAC1BC,EAAG,CAAC,OFAkBd,EEAE,WFAeO,EAASP,IEAX,eACrCe,IAAK,CAAC,QFDe,IAACf,EEKbgB,GACChB,GAFY,IAACA,GDJZI,KAUd5B,cAAgB,SAACH,EAAG4C,GACnB,OAAQnD,EAAKD,OACZ,KAAK,EACiC,aAAjCC,EAAKoD,OAAO7C,EAAE8C,gBACjBF,IAED,MACE,KAAK,EAEP,ODjBsBjB,ECgBN,WDhBWoB,ECgBC/C,EAAEgD,WDhBcd,EAASP,GAAOoB,ECiBrDH,IACL,QACE,MAAO,CAAC,ODnBS,IAACjB,EAAKoB,GCFhBhB,KAyBbO,eAAiB,WACf7C,EAAKD,SAzBPuC,KAAKvC,MAAQ,EACbuC,KAAKc,OENa,SAAAI,GAChB,IAAIC,EAAc,SAAAC,GAAI,OAAIA,EAAKC,MAAM,IAAIC,IAAI,SAAAC,GAAC,OAAIA,EAAEC,WAAW,MAC3DC,EAAU,SAAAC,GAAC,OAAK,IAAMC,OAAOD,GAAGT,SAAS,KAAKW,QAAQ,IACtDC,EAAkB,SAAAC,GAAI,OAAIX,EAAYD,GAAMa,OAAO,SAAC5E,EAAE6E,GAAH,OAAS7E,EAAI6E,GAAGF,IAEvE,OAAO,SAAAV,GAAI,OAAIA,EAAKC,MAAM,IACrBC,IAAIH,GACJG,IAAIO,GACJP,IAAIG,GACJQ,KAAK,KFHEnB,CAAO,gBGiBRtC,EAtBb,SAAAA,IAAc,IAAAd,EAAAsC,KAAAK,OAAAC,EAAA,EAAAD,CAAAL,KAAAxB,GAAAwB,KAIdvB,WAAa,SAACmB,GACZlC,EAAKwE,QAAQC,OAAO,EAAG,EAAGvC,GAEtBlC,EAAKwE,QAAQrC,OAAS,IACxBnC,EAAKwE,QAAQE,OARHpC,KAYdrB,eAAiB,SAAC0D,GAChB,OAAI3E,EAAKwE,QAAQrC,QAAUwC,GACjB,EACyB,IAAxB3E,EAAKwE,QAAQI,OAGjB5E,EAAKwE,QAAQG,QAHb,GAdLrC,KAAKkC,QAAU,ICsBNK,+LAhBXvC,KAAKwC,eAAiB,IAAI5E,EAC1BoC,KAAKyC,kBAAoB,IAAIjE,mCAI7B,OACEtB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAACsF,EAAD,CAAU9E,eAAgBoC,KAAKwC,iBAC/BtF,EAAAC,EAAAC,cAACuF,EAAD,CAAK/E,eAAgBoC,KAAKwC,eAAgBhE,kBAAmBwB,KAAKyC,6BAX1DnF,aCKEsF,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhG,EAAAC,EAAAC,cAAC+F,EAAD,MAASjF,SAASkF,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.10e85d81.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './MainInfo.css';\r\n\r\nclass MainInfo extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"main-info-container\"/>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MainInfo;\r\n","import React, { Component } from 'react';\r\nimport './Cmd.css';\r\n\r\nclass Cmd extends Component {\r\n  state = { \r\n    round: this.props.GameController.round,\r\n    arrowUp: 0\r\n  };\r\n\r\n  componentDidMount() {\r\n    if (this.props.GameController.round !== 0) {\r\n      this.changeTextMain();\r\n    }\r\n  }\r\n\r\n  onKeyPress = (event) => {\r\n    if (event.key === \"Enter\") {\r\n      let v = document.querySelector(\".cmd\");\r\n      this.props.GameController.validateInput(v.value, this.changeTextMain);\r\n      this.addToCmdWindow(v.value);\r\n      this.props.HistoryController.addHistory(v.value);\r\n      v.value = \"\";\r\n    } else if (event.key === \"ArrowUp\") {\r\n      let a = this.state.arrowUp;\r\n      let v = document.querySelector(\".cmd\");\r\n      let r = this.props.HistoryController.getLastHistory(a);\r\n      if (r === -1) {\r\n        this.setState({ arrowUp: 1 });\r\n        r = this.props.HistoryController.getLastHistory(0);\r\n      } else if (r === undefined) {\r\n        r = \"\";\r\n      } else {\r\n        a = a + 1;\r\n        this.setState({ arrowUp: a });\r\n      }\r\n      v.value = r;\r\n    }\r\n  }\r\n\r\n  onClickInput = () => {\r\n    if (this.props.GameController.round === 0) {\r\n      this.changeTextMain();\r\n      let m = document.querySelector(\".cmd-window-hidden\");\r\n      let node = document.createElement(\"DIV\");\r\n      node.className = \"cmd-window\";\r\n      m.replaceWith(node);\r\n    }\r\n  }\r\n\r\n  changeTextMain = () => {\r\n    let m = document.querySelector(\".main-info-container\");\r\n    \r\n    while (m.hasChildNodes()) {\r\n      m.children[0].remove();\r\n    }\r\n\r\n    const textArray = this.props.GameController.getText();\r\n    let node = document.createElement(\"SPAN\");\r\n    node.className = \"main-info-element\"\r\n    textArray.forEach(element => {\r\n      let textnode = document.createTextNode(element);\r\n      node.appendChild(textnode);\r\n      node.appendChild(document.createElement(\"BR\"));\r\n    });\r\n    m.appendChild(node);\r\n  }\r\n\r\n  addToCmdWindow = (elm) => {\r\n    let m = document.querySelector(\".cmd-window\");\r\n\r\n    if (m.children.length >= 13) {\r\n      m.lastChild.remove();\r\n    }\r\n\r\n    let node = document.createElement(\"P\");\r\n    node.className = \"cmd-window-element\"\r\n    let textnode = document.createTextNode(\"> \" + elm);\r\n    node.appendChild(textnode);\r\n    m.prepend(node);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"cmd-container\">\r\n        <input onClick={this.onClickInput} onKeyDown={this.onKeyPress} className=\"cmd\"></input>\r\n        <div className=\"cmd-window-hidden\"/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Cmd;\r\n","\r\nlet gameData = {\r\n    username: \"\"\r\n};\r\n\r\nexport let getGameData = (elm) => { return gameData[elm]; };\r\n\r\nexport let setGameData = (elm, val) => { return gameData[elm] = val; };\r\n","import { cipher } from './Crypto.js';\r\nimport { getGameLines } from '../gamedata/GameLines.js';\r\nimport { setGameData } from '../gamedata/GameData.js';\r\n\r\nclass GameController {\r\n\tconstructor() {\r\n\t\tthis.round = 0;\r\n\t\tthis.cipher = cipher(\"planesecret\");\r\n\t}\r\n\r\n  getText = () => {\r\n    this.incrementRound();\r\n    return getGameLines(this.round);\r\n  }\r\n\r\n\tvalidateInput = (v, f) => {\r\n\t\tswitch (this.round) {\r\n\t\t\tcase 1: \r\n\t\t\t\tif (this.cipher(v.toLowerCase()) === \"030f0405\") {\r\n\t\t\t\t\tf();\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n      case 2:\r\n        setGameData(\"username\", v.toString());\r\n\t\t\t\treturn f();\r\n      default:\r\n        return [\"Bug\"];\r\n    }\r\n\t}\r\n\r\n  incrementRound = () => {\r\n    this.round++;\r\n  }\r\n\r\n}\r\n\r\nexport default GameController;\r\n","import { getGameData } from './GameData.js';\r\n\r\nlet gameLines = () => { return  {\r\n    1: [\"First step done\", \"You must find it ðŸ”’\"],\r\n    2: [\"Welcome in the SYS\", \"Please confirm your identity (nickname)\"],\r\n    3: [\"Hi \" + getGameData(\"username\"), \"Attack this\"],\r\n    bug: [\"Bug\"]\r\n}};\r\n\r\nexport let getGameLines = (elm) => { \r\n    let gl = gameLines();\r\n    return gl[elm]; \r\n};","\r\nexport let cipher = salt => {\r\n    let textToChars = text => text.split('').map(c => c.charCodeAt(0))\r\n    let byteHex = n => (\"0\" + Number(n).toString(16)).substr(-2)\r\n    let applySaltToChar = code => textToChars(salt).reduce((a,b) => a ^ b, code)    \r\n\r\n    return text => text.split('')\r\n        .map(textToChars)\r\n        .map(applySaltToChar)\r\n        .map(byteHex)\r\n        .join('')\r\n}\r\n\r\nexport let decipher = salt => {\r\n    let textToChars = text => text.split('').map(c => c.charCodeAt(0))\r\n    let saltChars = textToChars(salt)\r\n    let applySaltToChar = code => saltChars.reduce((a,b) => a ^ b, code)\r\n    return encoded => encoded.match(/.{1,2}/g)\r\n        .map(hex => parseInt(hex, 16))\r\n        .map(applySaltToChar)\r\n        .map(charCode => String.fromCharCode(charCode))\r\n        .join('')\r\n}","\r\nclass HistoryController {\r\n  constructor() {\r\n      this.history = [];\r\n  }\r\n\r\n  addHistory = (elm) => {\r\n    this.history.splice(0, 0, elm);\r\n\r\n    if (this.history.length > 13) {\r\n      this.history.pop();\r\n    }\r\n  }\r\n\r\n  getLastHistory = (i) => {\r\n    if (this.history.length <= i) {\r\n      return -1;\r\n    } else if (this.history.lenght === 0) {\r\n      return undefined;\r\n    }\r\n    return this.history[i];\r\n  }\r\n}\r\n\r\nexport default HistoryController;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport MainInfo from './components/MainInfo/MainInfo.js';\nimport Cmd from './components/Cmd/Cmd.js';\nimport GameController from './controller/GameController.js';\nimport HistoryController from './controller/HistoryController.js';\n\nclass App extends Component {\n  componentWillMount() {\n    this.gameController = new GameController();\n    this.historyController = new HistoryController();\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <MainInfo GameController={this.gameController}/>\n          <Cmd GameController={this.gameController} HistoryController={this.historyController}/>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}